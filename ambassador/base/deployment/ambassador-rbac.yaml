---
apiVersion: v1
kind: Service
metadata:
  labels:
    service: ambassador-admin
  name: ambassador-admin
spec:
  type: NodePort
  ports:
    - name: ambassador-admin
      port: 8877
      targetPort: 8877
  selector:
    service: ambassador
# ---
# apiVersion: rbac.authorization.k8s.io/v1beta1
# kind: ClusterRole
# metadata:
#   name: ambassador
# rules:
#   - apiGroups: [""]
#     resources: ["endpoints", "namespaces", "secrets", "services"]
#     verbs: ["get", "list", "watch"]
#   - apiGroups: ["getambassador.io"]
#     resources: ["*"]
#     verbs: ["get", "list", "watch"]
#   - apiGroups: ["apiextensions.k8s.io"]
#     resources: ["customresourcedefinitions"]
#     verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: $(ambassadorServiceAccount)-ambassador
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ambassador
subjects:
  - kind: ServiceAccount
    name: $(ambassadorServiceAccount)-ambassador
    namespace: default
---
apiVersion: v1
kind: ServiceAccount
metadata:
  # name: ambassador
  name: $(ambassadorServiceAccount)-ambassador
# ---
# apiVersion: apiextensions.k8s.io/v1beta1
# kind: CustomResourceDefinition
# metadata:
#   name: authservices.getambassador.io
# spec:
#   group: getambassador.io
#   version: v1
#   versions:
#     - name: v1
#       served: true
#       storage: true
#   scope: Namespaced
#   names:
#     plural: authservices
#     singular: authservice
#     kind: AuthService
#     categories:
#       - ambassador-crds
# ---
# apiVersion: apiextensions.k8s.io/v1beta1
# kind: CustomResourceDefinition
# metadata:
#   name: consulresolvers.getambassador.io
# spec:
#   group: getambassador.io
#   version: v1
#   versions:
#     - name: v1
#       served: true
#       storage: true
#   scope: Namespaced
#   names:
#     plural: consulresolvers
#     singular: consulresolver
#     kind: ConsulResolver
# ---
# apiVersion: apiextensions.k8s.io/v1beta1
# kind: CustomResourceDefinition
# metadata:
#   name: kubernetesendpointresolvers.getambassador.io
# spec:
#   group: getambassador.io
#   version: v1
#   versions:
#     - name: v1
#       served: true
#       storage: true
#   scope: Namespaced
#   names:
#     plural: kubernetesendpointresolvers
#     singular: kubernetesendpointresolver
#     kind: KubernetesEndpointResolver
# ---
# apiVersion: apiextensions.k8s.io/v1beta1
# kind: CustomResourceDefinition
# metadata:
#   name: kubernetesserviceresolvers.getambassador.io
# spec:
#   group: getambassador.io
#   version: v1
#   versions:
#     - name: v1
#       served: true
#       storage: true
#   scope: Namespaced
#   names:
#     plural: kubernetesserviceresolvers
#     singular: kubernetesserviceresolver
#     kind: KubernetesServiceResolver
# ---
# apiVersion: apiextensions.k8s.io/v1beta1
# kind: CustomResourceDefinition
# metadata:
#   name: mappings.getambassador.io
# spec:
#   group: getambassador.io
#   version: v1
#   versions:
#     - name: v1
#       served: true
#       storage: true
#   scope: Namespaced
#   names:
#     plural: mappings
#     singular: mapping
#     kind: Mapping
#     categories:
#       - ambassador-crds
# ---
# apiVersion: apiextensions.k8s.io/v1beta1
# kind: CustomResourceDefinition
# metadata:
#   name: modules.getambassador.io
# spec:
#   group: getambassador.io
#   version: v1
#   versions:
#     - name: v1
#       served: true
#       storage: true
#   scope: Namespaced
#   names:
#     plural: modules
#     singular: module
#     kind: Module
#     categories:
#       - ambassador-crds
# ---
# apiVersion: apiextensions.k8s.io/v1beta1
# kind: CustomResourceDefinition
# metadata:
#   name: ratelimitservices.getambassador.io
# spec:
#   group: getambassador.io
#   version: v1
#   versions:
#     - name: v1
#       served: true
#       storage: true
#   scope: Namespaced
#   names:
#     plural: ratelimitservices
#     singular: ratelimitservice
#     kind: RateLimitService
#     categories:
#       - ambassador-crds
# ---
# apiVersion: apiextensions.k8s.io/v1beta1
# kind: CustomResourceDefinition
# metadata:
#   name: tcpmappings.getambassador.io
# spec:
#   group: getambassador.io
#   version: v1
#   versions:
#     - name: v1
#       served: true
#       storage: true
#   scope: Namespaced
#   names:
#     plural: tcpmappings
#     singular: tcpmapping
#     kind: TCPMapping
#     categories:
#       - ambassador-crds
# ---
# apiVersion: apiextensions.k8s.io/v1beta1
# kind: CustomResourceDefinition
# metadata:
#   name: tlscontexts.getambassador.io
# spec:
#   group: getambassador.io
#   version: v1
#   versions:
#     - name: v1
#       served: true
#       storage: true
#   scope: Namespaced
#   names:
#     plural: tlscontexts
#     singular: tlscontext
#     kind: TLSContext
#     categories:
#       - ambassador-crds
# ---
# apiVersion: apiextensions.k8s.io/v1beta1
# kind: CustomResourceDefinition
# metadata:
#   name: tracingservices.getambassador.io
# spec:
#   group: getambassador.io
#   version: v1
#   versions:
#     - name: v1
#       served: true
#       storage: true
#   scope: Namespaced
#   names:
#     plural: tracingservices
#     singular: tracingservice
#     kind: TracingService
#     categories:
#       - ambassador-crds
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ambassador
  labels:
    service: ambassador
spec:
  selector:
    matchLabels:
      service: ambassador
  replicas: 3
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
        "consul.hashicorp.com/connect-inject": "false"
      labels:
        service: ambassador
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    service: ambassador
                topologyKey: kubernetes.io/hostname
      # serviceAccountName: ambassador
      serviceAccountName: $(ambassadorServiceAccount)-ambassador
      containers:
        - name: ambassador
          image: quay.io/datawire/ambassador:0.72.0
          resources:
            limits:
              cpu: 1
              memory: 400Mi
            requests:
              cpu: 200m
              memory: 100Mi
          env:
            - name: AMBASSADOR_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          envFrom:
            - configMapRef:
                name: ambassador-config
          ports:
            - name: http
              containerPort: 8080
            - name: https
              containerPort: 8443
            - name: admin
              containerPort: 8877
          livenessProbe:
            httpGet:
              path: /ambassador/v0/check_alive
              port: 8877
            initialDelaySeconds: 30
            periodSeconds: 3
          readinessProbe:
            httpGet:
              path: /ambassador/v0/check_ready
              port: 8877
            initialDelaySeconds: 30
            periodSeconds: 3
      restartPolicy: Always
      securityContext:
        runAsUser: 8888
---
apiVersion: v1
kind: Service
metadata:
  name: ambassador
spec:
  type: NodePort
  externalTrafficPolicy: Local
  ports:
    - port: 80
      targetPort: 8080
  selector:
    service: ambassador
